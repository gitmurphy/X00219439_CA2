trigger:
  - main
  - development

pool:
  vmImage: 'ubuntu-latest'

variables:
  javaVersion: '17'

stages:
  - stage: build
    displayName: "Build Application"
    jobs:
      - job: Build
        displayName: "Build Job"
        steps:

          - script: chmod +x gradlew
            displayName: 'Make gradlew executable'

          # Ensure correct JDK is available
          - task: JavaToolInstaller@0
            inputs:
              versionSpec: '$(javaVersion)'
              jdkArchitectureOption: 'x64'
              jdkSourceOption: 'PreInstalled'

          # Run Gradle build task -> creates jar file
          - task: Gradle@3
            inputs:
              workingDirectory: ''
              gradleWrapperFile: 'gradlew'
              gradleOptions: '-Xmx3072m'
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '17'
              jdkArchitectureOption: 'x64'
              tasks: 'clean build'

          # Copy JAR files into the artifact staging directory for use in later stages
          - task: CopyFiles@2
            displayName: 'Copy jar files'
            inputs:
              contents: '**/build/libs/*.jar'
              targetFolder: '$(build.artifactStagingDirectory)'

          # Publish other build artifacts into the artifact staging directory for use in later stages
          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: '$(Build.ArtifactStagingDirectory)'
              artifactName: 'drop'

  - stage: test
    displayName: "Test Application"
    dependsOn: build
    jobs:
      - job: Test
        displayName: "Test Job"
        steps:
          - checkout: self
            fetchDepth: 0

          - script: chmod +x gradlew
            displayName: 'Make gradlew executable'

          # Establish SonarCloud connection
          - task: SonarCloudPrepare@3
            inputs:
              SonarQube: 'SonarConnection'
              organization: 'x00219439'
              scannerMode: 'other'
              extraProperties: |
                sonar.projectKey=X00219439_X00219439_CA2
                sonar.projectName=X00219439_CA2

          # Download the JAR file and other build artifacts from the build stage
          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'drop'
              downloadPath: '$(System.ArtifactsDirectory)'

          # Run Gradle test tasks
          - task: Gradle@3
            inputs:
              workingDirectory: ''
              gradleWrapperFile: 'gradlew'
              gradleOptions: '-Xmx3072m'
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '17'
              jdkArchitectureOption: 'x64'
              publishJUnitResults: true
              testResultsFiles: '**/TEST-*.xml'
              tasks: 'test jacocoTestReport sonar'

          # Publish code coverage results to Azure
          - task: PublishCodeCoverageResults@2
            inputs:
              summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/build/reports/jacoco/test/jacocoTestReport.xml'
              pathToSources: '$(System.DefaultWorkingDirectory)/app/src/main/java/'

          # Publish SonarCloud results
          - task: SonarCloudPublish@3
            inputs:
              pollingTimeoutSec: '300'

  - stage: security
    displayName: 'Security Scanning'
    dependsOn: test
    jobs:
      - job: SecurityCheck

        steps:
          # Download artifacts from the build stage
          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'drop'
              downloadPath: '$(System.ArtifactsDirectory)'

          # Run security scanning
          - task: MicrosoftSecurityDevOps@1
            inputs:
              categories: 'sources'  # Scan source code
              break: false # Starting with false to avoid breaking builds
              tools: 'credscan'    # Basic credential scanning
              sourcePath: '$(System.DefaultWorkingDirectory)'

  - stage: deploy
    displayName: "Deploy Application to Dev Environment"
    dependsOn: security
    jobs:
      - deployment: deploy
        environment: 'Dev'
        strategy:
          runOnce:
            deploy:
              steps:

                # Ensure correct JDK is available
                - task: JavaToolInstaller@0
                  inputs:
                    versionSpec: '$(javaVersion)'
                    jdkArchitectureOption: 'x64'
                    jdkSourceOption: 'PreInstalled'

                # Download the JAR file and other build artifacts from the build stage
                - task: DownloadBuildArtifacts@0
                  inputs:
                    buildType: 'current'
                    downloadType: 'single'
                    artifactName: 'drop'
                    downloadPath: '$(System.ArtifactsDirectory)'

                # Find the JAR file and run it
                - script: |
                    JAR_FILE=$(find $(System.ArtifactsDirectory) -name *.jar)
                    if [ -z "$JAR_FILE" ]; then
                      echo "No JAR file found"
                      exit 1
                    fi
                    echo "Found JAR file: $JAR_FILE"
                    java -jar $JAR_FILE &
                  displayName: 'Simple To-Do Application'